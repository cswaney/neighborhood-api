service:
  name: neighborhood-api

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'staging'}
  region: ${opt:region, 'us-east-1'}
  environment:
    EVENTS_TABLE: Neighborhood-Events-${self:provider.stage}
    EVENT_LOCATION_ID_INDEX: Neighborhood-EventLocationIdIndex
    EVENT_USER_ID_INDEX: Neighborhood-EventUserIdIndex
    USERS_TABLE: Neighborhood-Users-${self:provider.stage}
    USER_LOCATION_ID_INDEX: UserLocationIdIndex
    COMMENTS_TABLE: Neighborhood-Comments-${self:provider.stage}
    COMMENT_EVENT_ID_INDEX: Neighborhood-CommentEventIdIndex
    ATTACHMENTS_S3_BUCKET: neighborhood-api-Attachments-${self:provider.stage}

functions:
  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler
  CreateEvent:
    handler: src/lambda/http/createEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: post
          path: events
          # authorizer: Auth
          cors: true
  DeleteEvent:
    handler: src/lambda/http/deleteEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: delete
          path: events/{eventId}
          # authorizer: Auth
          cors: true
  GetEvent:
    handler: src/lambda/http/getEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: get
          path: events/{eventId}
          # authorizer: Auth
          cors: true
  GetLocationEvents:
    handler: src/lambda/http/getLocationEvents.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/${self:provider.environment.EVENT_LOCATION_ID_INDEX}
    events:
      - http:
          method: get
          path: events/location/{locationId}
          # authorizer: Auth
          cors: true
  GetUserEvents:
    handler: src/lambda/http/getUserEvents.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/${self:provider.environment.EVENT_USER_ID_INDEX}
    events:
      - http:
          method: get
          path: events/user/{userId}
          # authorizer: Auth
          cors: true
  CreateUser:
    handler: src/lambda/http/createUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    events:
      - http:
          method: post
          path: user
          # authorizer: Auth
          cors: true
  GetUser:
    handler: src/lambda/http/getUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    events:
      - http:
          method: get
          path: user/{userId}
          # authorizer: Auth
          cors: true
  CreateComment:
    handler: src/lambda/http/createComment.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
    events:
      - http:
          method: post
          path: comment
          # authorizer: Auth
          cors: true  
  DeleteComment:
    handler: src/lambda/http/deleteComment.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
    events:
      - http:
          method: delete
          path: comment/{commentId}
          # authorizer: Auth
          cors: true  
  UpdateComment:
    handler: src/lambda/http/updateComment.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
    events:
      - http:
          method: patch
          path: comment/{commentId}
          # authorizer: Auth
          cors: true  
  GetComments:
    handler: src/lambda/http/getComments.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/${self:provider.environment.COMMENT_EVENT_ID_INDEX}
    events:
      - http:
          method: get
          path: thread/{eventId}
          # authorizer: Auth
          cors: true

resources:
  Resources:
    # DynamoDB
    EventsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EVENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: locationId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EVENT_LOCATION_ID_INDEX}
            KeySchema:
            - AttributeName: locationId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.EVENT_USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: locationId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_LOCATION_ID_INDEX}
            KeySchema:
            - AttributeName: locationId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    CommentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COMMENT_EVENT_ID_INDEX}
            KeySchema:
            - AttributeName: eventId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST