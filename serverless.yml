service:
  name: neighborhood-api

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'staging'}
  region: ${opt:region, 'us-east-1'}
  environment:
    EVENTS_TABLE: Neighborhood-Events-${self:provider.stage}
    EVENT_LOCATION_ID_INDEX: Neighborhood-EventLocationIdIndex
    EVENT_USER_ID_INDEX: Neighborhood-EventUserIdIndex
    USERS_TABLE: Neighborhood-Users-${self:provider.stage}
    USER_LOCATION_ID_INDEX: UserLocationIdIndex
    COMMENTS_TABLE: Neighborhood-Comments-${self:provider.stage}
    COMMENT_EVENT_ID_INDEX: Neighborhood-CommentEventIdIndex
    ATTACHMENTS_S3_BUCKET: neighborhood-attachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  tracing:
    lambda: true
    apiGateway: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Neighborhood API
        description: API for Neighborhood App
    models:
      - name: CreateCommentRequest
        contentType: application/json
        schema: ${file(src/requests/json/create-comment-request.json)}
      - name: CreateEventRequest
        contentType: application/json
        schema: ${file(src/requests/json/create-event-request.json)}
      - name: CreateUserRequest
        contentType: application/json
        schema: ${file(src/requests/json/create-user-request.json)}
      - name: UpdateCommentRequest
        contentType: application/json
        schema: ${file(src/requests/json/update-comment-request.json)}
      - name: UpdateEventRequest
        contentType: application/json
        schema: ${file(src/requests/json/update-event-request.json)}
      - name: UpdateUserRequest
        contentType: application/json
        schema: ${file(src/requests/json/update-user-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  CreateEvent:
    handler: src/lambda/http/createEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*      
    events:
      - http:
          method: post
          path: events
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create an event
            description: Create an event
            requestModels:
              'application/json': CreateEventRequest
  UpdateEvent:
    handler: src/lambda/http/updateEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: patch
          path: events/{eventId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update event information
            description: Update event information
            requestModels:
              'application/json': UpdateEventRequest
  DeleteEvent:
    handler: src/lambda/http/deleteEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: delete
          path: events/{eventId}
          authorizer: Auth
          cors: true
  GetEvent:
    handler: src/lambda/http/getEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: get
          path: events/{eventId}
          authorizer: Auth
          cors: true
  GetLocationEvents:
    handler: src/lambda/http/getLocationEvents.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/${self:provider.environment.EVENT_LOCATION_ID_INDEX}
    events:
      - http:
          method: get
          path: events/location/{locationId}
          authorizer: Auth
          cors: true
  GetUserEvents:
    handler: src/lambda/http/getUserEvents.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/${self:provider.environment.EVENT_USER_ID_INDEX}
    events:
      - http:
          method: get
          path: events/user/{userId}
          authorizer: Auth
          cors: true
  CreateUser:
    handler: src/lambda/http/createUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*   
    events:
      - http:
          method: post
          path: user
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create user information
            description: Create user information
            requestModels:
              'application/json': CreateUserRequest
  UpdateUser:
    handler: src/lambda/http/updateUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    events:
      - http:
          method: patch
          path: user/{userId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update user information
            description: Update user information
            requestModels:
              'application/json': UpdateUserRequest
  GetUser:
    handler: src/lambda/http/getUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    events:
      - http:
          method: get
          path: user/{userId}
          authorizer: Auth
          cors: true
  CreateComment:
    handler: src/lambda/http/createComment.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
    events:
      - http:
          method: post
          path: comment
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a comment
            description: Create a comment
            requestModels:
              'application/json': CreateCommentRequest 
  DeleteComment:
    handler: src/lambda/http/deleteComment.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
    events:
      - http:
          method: delete
          path: comment/{commentId}
          authorizer: Auth
          cors: true  
  UpdateComment:
    handler: src/lambda/http/updateComment.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
    events:
      - http:
          method: patch
          path: comment/{commentId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update comment text
            description: Update comment text
            requestModels:
              'application/json': UpdateCommentRequest
  GetComments:
    handler: src/lambda/http/getComments.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/${self:provider.environment.COMMENT_EVENT_ID_INDEX}
    events:
      - http:
          method: get
          path: thread/{eventId}
          authorizer: Auth
          cors: true

resources:
  Resources:
    # DynamoDB
    EventsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EVENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: locationId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EVENT_LOCATION_ID_INDEX}
            KeySchema:
            - AttributeName: locationId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.EVENT_USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: locationId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_LOCATION_ID_INDEX}
            KeySchema:
            - AttributeName: locationId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    CommentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COMMENT_EVENT_ID_INDEX}
            KeySchema:
            - AttributeName: eventId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    # S3
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      # DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        # NotificationConfiguration:
        #   TopicConfigurations:
        #   - Event: s3:ObjectCreated:*  # any object created
        #     Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 300
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'  # permission for anyone
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket  # attached to bucket allocated above
    # Default API Gateway
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'    
    # Request Validation
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false